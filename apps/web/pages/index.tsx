import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import {
  useContractRead,
  useAccount,
  useContractReads,
  useContractWrite,
  usePrepareContractWrite,
  useConnect,
} from "wagmi";
import DeployTx from "../../../packages/contracts/broadcast/AIMVaultFactory.s.sol/5/run-latest.json";
import Vault from "../../../packages/contracts/out/AIMVault.sol/AIMVault.json";
import VaultFactory from "../../../packages/contracts/out/AIMVaultFactory.sol/AIMVaultFactory.json";
import Spinner from "../components/spinner";
import DepositModal from "../components/DepositModal";
import RedeemModal from "../components/RedeemModal";

const vaultFactory = DeployTx.transactions[0].contractAddress;
const cUSDC = "0xd87ba7a50b2e7e660f678a895e4b72e7cb4ccd9c";

const Home: NextPage = () => {
  const [vaults, setVaults] = useState<any[]>([]);
  const [myVaults, setMyVaults] = useState<any[]>();
  const [underlying, setUnderlying] = useState("");
  const [isLoading, setIsLoading] = useState(true);

  const { address } = useAccount();

  // const { data: ConnectData } = useConnect();

  // const confirmationNo = ConnectData?.chain.id === 5 ? 1 : 3;

  useContractRead({
    addressOrName: vaultFactory,
    contractInterface: VaultFactory.abi,
    functionName: "vaults",
    args: cUSDC,
    watch: true,
    onSettled(data, error) {
      if (error) console.log("error", error);
      setVaults([data]);
      setIsLoading(false);
    },
  });

  useContractRead({
    addressOrName: vaults[0],
    contractInterface: Vault.abi,
    functionName: "balanceOf",
    args: address,
    onSettled(data, error) {
      if (error) console.log("error", error);

      if (data) {
        let balance = parseInt(data?.toString());
        balance > 0 && setMyVaults([data]);
      }
      console.log("vault bal", data?.toString());
    },
  });

  const { data } = useContractReads({
    contracts: [
      {
        addressOrName: vaults[0],
        contractInterface: Vault.abi,
        functionName: "name",
      },
      {
        addressOrName: vaults[0],
        contractInterface: Vault.abi,
        functionName: "getCompStrategyInfo",
      },
      {
        addressOrName: vaults[0],
        contractInterface: Vault.abi,
        functionName: "totalAssets",
      },
      {
        addressOrName: vaults[0],
        contractInterface: Vault.abi,
        functionName: "UNDERLYING",
      },
    ],
    watch: true,
    onSettled(data, error) {
      if (error) console.log("error", error);
      console.log("success", data);
      if (data) {
        setUnderlying(String(data[3]));
      }
    },
  });

  console.log("render");
  // console.log(isLoading);

  return (
    <div className="bg-gray-300 h-screen">
      <Head>
        <title>Yield Farm</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className="bg-black p-4">
        <h1 className="text-3xl text-white  mx-auto py-3 font-serif font-bold">
          Yield Farm
        </h1>
      </header>

      <main className="w-11/12 max-w-6xl mx-auto mt-4">
        <section className=" text-white p-4 rounded-lg">
          <h2 className="text-xl mb-6 font-serif text-gray-900">My Vaults</h2>

          <div className="bg-black rounded-lg">
            {myVaults ? (
              myVaults.map((vault) => (
                <div key={vault} className="p-4">
                  <p>{data?.[0] && data[0]}</p>
                  <p>
                    APY:{" "}
                    {data?.[1] &&
                      `${(
                        (Math.pow(
                          (data[1][1].toNumber() / 1e18) * 6570 + 1,
                          365
                        ) -
                          1) *
                        100
                      ).toFixed(2)}%`}
                  </p>
                  <p>Total Assets: {data?.[2] && `${data[2]}`}</p>
                  <RedeemModal vault={vaults[0]} underlying={underlying} />
                </div>
              ))
            ) : (
              <div className="p-4">
                <p className="py-2">You haven&#39;t deposited in any vaults</p>
                <p className="py-2">Find a vault and deposit funds</p>
              </div>
            )}
          </div>
        </section>

        <section className="mt-10 p-3">
          <h2 className="text-xl mb-4 text-gray-900 font-seri">
            Available Vaults
          </h2>

          <div>
            {isLoading ? (
              <Spinner />
            ) : (
              vaults.map((vault) => (
                <div
                  key={vault}
                  className="p-2 rounded-md bg-black flex justify-between items-center text-white"
                >
                  <p>{data?.[0] && data[0]}</p>
                  <p>
                    APY:{" "}
                    {data?.[1] &&
                      `${(
                        (Math.pow(
                          (data[1][1].toNumber() / 1e18) * 6570 + 1,
                          365
                        ) -
                          1) *
                        100
                      ).toFixed(2)}%`}
                  </p>
                  <p>Total Assets: {data?.[2] && `${data[2]}`}</p>
                  <DepositModal vault={vaults[0]} underlying={underlying} />
                </div>
              ))
            )}
          </div>
        </section>
      </main>
    </div>
  );
};

export default Home;
